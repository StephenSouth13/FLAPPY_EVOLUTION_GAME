"use client"

import { motion } from "framer-motion"
import { ArrowLeft, Gamepad2, Target, Shield, Zap, Clock, Bomb, Trophy, Star } from "lucide-react"
import { Button } from "@/components/ui/button"
import { useGameStore } from "@/lib/store/game-store"
import Link from "next/link"

export default function TutorialPage() {
  const { darkMode, language } = useGameStore()

  const texts = {
    en: {
      title: "HOW TO PLAY",
      subtitle: "Master the art of space evolution",
      back: "Back to Home",
      controls: "Game Controls",
      controlsDesc: "Learn the basic controls to navigate your spacecraft",
      objectives: "Game Objectives",
      objectivesDesc: "Understand your mission and goals",
      powerups: "Power-ups Guide",
      powerupsDesc: "Discover special abilities to enhance your gameplay",
      worlds: "World Evolution",
      worldsDesc: "Journey through 10 unique themed worlds",
      tips: "Pro Tips",
      tipsDesc: "Advanced strategies for high scores",

      // Controls
      flyControl: "Fly Up",
      flyDesc: "Click mouse, tap screen, or press SPACE to make your ship fly upward",
      shootControl: "Shoot Laser",
      shootDesc: "Press E key or tap the shoot button to fire lasers at enemies",
      pauseControl: "Pause Game",
      pauseDesc: "Press ESC or click pause button to pause the game",

      // Objectives
      obj1: "Survive as long as possible",
      obj1Desc: "Avoid obstacles and enemies to stay alive",
      obj2: "Destroy enemies for points",
      obj2Desc: "Shoot UFOs, birds, and other enemies to earn points",
      obj3: "Collect power-ups",
      obj3Desc: "Grab floating power-ups to gain special abilities",
      obj4: "Unlock new worlds",
      obj4Desc: "Progress through worlds every 25 points",

      // Power-ups
      shieldPower: "Shield Protection",
      shieldDesc: "5 seconds of invincibility - pass through enemies safely",
      autoFirePower: "Auto Fire",
      autoFireDesc: "10 seconds of automatic laser shooting",
      slowMotionPower: "Slow Motion",
      slowMotionDesc: "4 seconds of slowed time for easier navigation",
      bombPower: "Nuclear Bomb",
      bombDesc: "Instantly destroys all enemies on screen",

      // Tips
      tip1: "Stay in the middle",
      tip1Desc: "Keep your ship in the center area for better maneuverability",
      tip2: "Collect power-ups strategically",
      tip2Desc: "Save powerful abilities for difficult situations",
      tip3: "Learn enemy patterns",
      tip3Desc: "Each world has different enemy types with unique behaviors",
      tip4: "Practice makes perfect",
      tip4Desc: "The more you play, the better your reflexes become",
    },
    vi: {
      title: "H∆Ø·ªöNG D·∫™N CH∆†I",
      subtitle: "L√†m ch·ªß ngh·ªá thu·∫≠t ti·∫øn h√≥a v≈© tr·ª•",
      back: "V·ªÅ Trang Ch·ªß",
      controls: "ƒêi·ªÅu Khi·ªÉn Game",
      controlsDesc: "H·ªçc c√°ch ƒëi·ªÅu khi·ªÉn c∆° b·∫£n ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng t√†u v≈© tr·ª•",
      objectives: "M·ª•c Ti√™u Game",
      objectivesDesc: "Hi·ªÉu nhi·ªám v·ª• v√† m·ª•c ti√™u c·ªßa b·∫°n",
      powerups: "H∆∞·ªõng D·∫´n V·∫≠t Ph·∫©m",
      powerupsDesc: "Kh√°m ph√° kh·∫£ nƒÉng ƒë·∫∑c bi·ªát ƒë·ªÉ n√¢ng cao gameplay",
      worlds: "Ti·∫øn H√≥a Th·∫ø Gi·ªõi",
      worldsDesc: "H√†nh tr√¨nh qua 10 th·∫ø gi·ªõi ch·ªß ƒë·ªÅ ƒë·ªôc ƒë√°o",
      tips: "M·∫πo Chuy√™n Nghi·ªáp",
      tipsDesc: "Chi·∫øn l∆∞·ª£c n√¢ng cao ƒë·ªÉ ƒë·∫°t ƒëi·ªÉm cao",

      // Controls
      flyControl: "Bay L√™n",
      flyDesc: "Click chu·ªôt, ch·∫°m m√†n h√¨nh, ho·∫∑c nh·∫•n SPACE ƒë·ªÉ t√†u bay l√™n",
      shootControl: "B·∫Øn Laser",
      shootDesc: "Nh·∫•n ph√≠m E ho·∫∑c ch·∫°m n√∫t b·∫Øn ƒë·ªÉ b·∫Øn laser v√†o k·∫ª ƒë·ªãch",
      pauseControl: "T·∫°m D·ª´ng",
      pauseDesc: "Nh·∫•n ESC ho·∫∑c click n√∫t t·∫°m d·ª´ng ƒë·ªÉ d·ª´ng game",

      // Objectives
      obj1: "S·ªëng s√≥t c√†ng l√¢u c√†ng t·ªët",
      obj1Desc: "Tr√°nh ch∆∞·ªõng ng·∫°i v·∫≠t v√† k·∫ª ƒë·ªãch ƒë·ªÉ s·ªëng s√≥t",
      obj2: "Ti√™u di·ªát k·∫ª ƒë·ªãch ƒë·ªÉ l·∫•y ƒëi·ªÉm",
      obj2Desc: "B·∫Øn UFO, chim v√† k·∫ª ƒë·ªãch kh√°c ƒë·ªÉ ki·∫øm ƒëi·ªÉm",
      obj3: "Thu th·∫≠p v·∫≠t ph·∫©m",
      obj3Desc: "L·∫•y v·∫≠t ph·∫©m bay ƒë·ªÉ c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát",
      obj4: "M·ªü kh√≥a th·∫ø gi·ªõi m·ªõi",
      obj4Desc: "Ti·∫øn qua c√°c th·∫ø gi·ªõi m·ªói 25 ƒëi·ªÉm",

      // Power-ups
      shieldPower: "Khi√™n B·∫£o V·ªá",
      shieldDesc: "5 gi√¢y b·∫•t t·ª≠ - ƒëi qua k·∫ª ƒë·ªãch an to√†n",
      autoFirePower: "B·∫Øn T·ª± ƒê·ªông",
      autoFireDesc: "10 gi√¢y b·∫Øn laser t·ª± ƒë·ªông",
      slowMotionPower: "Ch·∫≠m Th·ªùi Gian",
      slowMotionDesc: "4 gi√¢y th·ªùi gian ch·∫≠m ƒë·ªÉ di chuy·ªÉn d·ªÖ h∆°n",
      bombPower: "Bom H·∫°t Nh√¢n",
      bombDesc: "Ti√™u di·ªát ngay l·∫≠p t·ª©c t·∫•t c·∫£ k·∫ª ƒë·ªãch tr√™n m√†n h√¨nh",

      // Tips
      tip1: "·ªû gi·ªØa m√†n h√¨nh",
      tip1Desc: "Gi·ªØ t√†u ·ªü khu v·ª±c gi·ªØa ƒë·ªÉ c∆° ƒë·ªông t·ªët h∆°n",
      tip2: "Thu th·∫≠p v·∫≠t ph·∫©m chi·∫øn l∆∞·ª£c",
      tip2Desc: "Gi·ªØ kh·∫£ nƒÉng m·∫°nh cho t√¨nh hu·ªëng kh√≥ khƒÉn",
      tip3: "H·ªçc pattern k·∫ª ƒë·ªãch",
      tip3Desc: "M·ªói th·∫ø gi·ªõi c√≥ lo·∫°i k·∫ª ƒë·ªãch kh√°c v·ªõi h√†nh vi ri√™ng",
      tip4: "Luy·ªán t·∫≠p t·∫°o n√™n ho√†n h·∫£o",
      tip4Desc: "Ch∆°i c√†ng nhi·ªÅu, ph·∫£n x·∫° c√†ng t·ªët h∆°n",
    },
  }

  const t = texts[language]

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  }

  return (
    <div
      className={`min-h-screen transition-colors duration-300 ${
        darkMode
          ? "bg-gradient-to-br from-gray-900 via-purple-900 to-black text-white"
          : "bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 text-white"
      }`}
    >
      {/* Header */}
      <div className="flex items-center justify-between p-6">
        <Link href="/">
          <Button variant="ghost" className="text-white hover:bg-white/20">
            <ArrowLeft className="mr-2" size={20} />
            {t.back}
          </Button>
        </Link>
        <div className="text-center">
          <h1 className="text-3xl font-bold">{t.title}</h1>
          <p className="text-lg opacity-80">{t.subtitle}</p>
        </div>
        <div className="w-24"></div>
      </div>

      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="max-w-6xl mx-auto px-6 pb-12"
      >
        {/* Controls Section */}
        <motion.section variants={itemVariants} className="mb-12">
          <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20">
            <div className="flex items-center mb-6">
              <Gamepad2 className="mr-3 text-blue-400" size={32} />
              <div>
                <h2 className="text-2xl font-bold">{t.controls}</h2>
                <p className="opacity-80">{t.controlsDesc}</p>
              </div>
            </div>

            <div className="grid md:grid-cols-3 gap-6">
              <motion.div
                className="bg-white/5 rounded-xl p-6 text-center"
                whileHover={{ scale: 1.05, y: -5 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <div className="text-4xl mb-4">üöÄ</div>
                <h3 className="font-bold text-lg mb-2">{t.flyControl}</h3>
                <p className="text-sm opacity-80">{t.flyDesc}</p>
              </motion.div>

              <motion.div
                className="bg-white/5 rounded-xl p-6 text-center"
                whileHover={{ scale: 1.05, y: -5 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <div className="text-4xl mb-4">üî´</div>
                <h3 className="font-bold text-lg mb-2">{t.shootControl}</h3>
                <p className="text-sm opacity-80">{t.shootDesc}</p>
              </motion.div>

              <motion.div
                className="bg-white/5 rounded-xl p-6 text-center"
                whileHover={{ scale: 1.05, y: -5 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <div className="text-4xl mb-4">‚è∏Ô∏è</div>
                <h3 className="font-bold text-lg mb-2">{t.pauseControl}</h3>
                <p className="text-sm opacity-80">{t.pauseDesc}</p>
              </motion.div>
            </div>
          </div>
        </motion.section>

        {/* Objectives Section */}
        <motion.section variants={itemVariants} className="mb-12">
          <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20">
            <div className="flex items-center mb-6">
              <Target className="mr-3 text-green-400" size={32} />
              <div>
                <h2 className="text-2xl font-bold">{t.objectives}</h2>
                <p className="opacity-80">{t.objectivesDesc}</p>
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {[
                { icon: "üíÄ", title: t.obj1, desc: t.obj1Desc },
                { icon: "üéØ", title: t.obj2, desc: t.obj2Desc },
                { icon: "‚ú®", title: t.obj3, desc: t.obj3Desc },
                { icon: "üåç", title: t.obj4, desc: t.obj4Desc },
              ].map((obj, index) => (
                <motion.div
                  key={index}
                  className="bg-white/5 rounded-xl p-6 flex items-start gap-4"
                  whileHover={{ scale: 1.02, x: 5 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="text-3xl">{obj.icon}</div>
                  <div>
                    <h3 className="font-bold text-lg mb-2">{obj.title}</h3>
                    <p className="text-sm opacity-80">{obj.desc}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </motion.section>

        {/* Power-ups Section */}
        <motion.section variants={itemVariants} className="mb-12">
          <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20">
            <div className="flex items-center mb-6">
              <Star className="mr-3 text-yellow-400" size={32} />
              <div>
                <h2 className="text-2xl font-bold">{t.powerups}</h2>
                <p className="opacity-80">{t.powerupsDesc}</p>
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {[
                {
                  icon: <Shield className="text-cyan-400" size={24} />,
                  title: t.shieldPower,
                  desc: t.shieldDesc,
                  color: "border-cyan-400/30 bg-cyan-400/10",
                },
                {
                  icon: <Zap className="text-yellow-400" size={24} />,
                  title: t.autoFirePower,
                  desc: t.autoFireDesc,
                  color: "border-yellow-400/30 bg-yellow-400/10",
                },
                {
                  icon: <Clock className="text-purple-400" size={24} />,
                  title: t.slowMotionPower,
                  desc: t.slowMotionDesc,
                  color: "border-purple-400/30 bg-purple-400/10",
                },
                {
                  icon: <Bomb className="text-red-400" size={24} />,
                  title: t.bombPower,
                  desc: t.bombDesc,
                  color: "border-red-400/30 bg-red-400/10",
                },
              ].map((power, index) => (
                <motion.div
                  key={index}
                  className={`rounded-xl p-6 flex items-start gap-4 border ${power.color}`}
                  whileHover={{ scale: 1.02, y: -3 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="p-2 rounded-lg bg-white/10">{power.icon}</div>
                  <div>
                    <h3 className="font-bold text-lg mb-2">{power.title}</h3>
                    <p className="text-sm opacity-80">{power.desc}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </motion.section>

        {/* Pro Tips Section */}
        <motion.section variants={itemVariants}>
          <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20">
            <div className="flex items-center mb-6">
              <Trophy className="mr-3 text-orange-400" size={32} />
              <div>
                <h2 className="text-2xl font-bold">{t.tips}</h2>
                <p className="opacity-80">{t.tipsDesc}</p>
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {[
                { title: t.tip1, desc: t.tip1Desc, emoji: "üéØ" },
                { title: t.tip2, desc: t.tip2Desc, emoji: "‚ö°" },
                { title: t.tip3, desc: t.tip3Desc, emoji: "üß†" },
                { title: t.tip4, desc: t.tip4Desc, emoji: "üèÜ" },
              ].map((tip, index) => (
                <motion.div
                  key={index}
                  className="bg-gradient-to-r from-orange-500/10 to-red-500/10 rounded-xl p-6 border border-orange-500/20"
                  whileHover={{ scale: 1.02, y: -3 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="flex items-start gap-4">
                    <div className="text-2xl">{tip.emoji}</div>
                    <div>
                      <h3 className="font-bold text-lg mb-2 text-orange-300">{tip.title}</h3>
                      <p className="text-sm opacity-80">{tip.desc}</p>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </motion.section>
      </motion.div>
    </div>
  )
}
